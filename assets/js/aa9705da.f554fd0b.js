"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[1641],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(o,".").concat(m)]||d[m]||c[m]||s;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const s={},i="Artillery.io",l={unversionedId:"test-types/executor-artillery",id:"test-types/executor-artillery",title:"Artillery.io",description:"Artillery.io is an open-source load testing tool. It's designed to be both straightforward in configuration (YAML files), and powerful. Artillery executor allow you to run Artillery tests with Testkube.",source:"@site/docs/test-types/executor-artillery.md",sourceDirName:"test-types",slug:"/test-types/executor-artillery",permalink:"/testkube/test-types/executor-artillery",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-artillery.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Types",permalink:"/testkube/category/test-types"},next:{title:"cURL",permalink:"/testkube/test-types/executor-curl"}},o={},u=[{value:"<strong>Test Environment</strong>",id:"test-environment",level:2},{value:"<strong>Create a Test Manifest</strong>",id:"create-a-test-manifest",level:2},{value:"<strong>Create a New Testkube Test</strong>",id:"create-a-new-testkube-test",level:2},{value:"Testkube Dashboard",id:"testkube-dashboard",level:3},{value:"Testkube CLI",id:"testkube-cli",level:3},{value:"<strong>Running a Test</strong>",id:"running-a-test",level:2},{value:"<strong>Getting Test Results</strong>",id:"getting-test-results",level:2},{value:"<strong> Additional examples</strong>",id:"-additional-examples",level:2}],p={toc:u};function c(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"artilleryio"},"Artillery.io"),(0,a.kt)("p",null,"Artillery.io is an open-source load testing tool. It's designed to be both straightforward in configuration (YAML files), and powerful. Artillery executor allow you to run Artillery tests with Testkube."),(0,a.kt)("h2",{id:"test-environment"},(0,a.kt)("strong",{parentName:"h2"},"Test Environment")),(0,a.kt)("p",null,"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has\nClusterIP ",(0,a.kt)("inlineCode",{parentName:"p"},"Service")," created and is exposed on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8088"),". The service name is ",(0,a.kt)("inlineCode",{parentName:"p"},"testkube-api-server"),"\nand is exposing the ",(0,a.kt)("inlineCode",{parentName:"p"},"/health")," endpoint that we want to test."),(0,a.kt)("p",null,"To call the SUT inside a cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://testkube-api-server:8088/health\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"200 OK\n")),(0,a.kt)("h2",{id:"create-a-test-manifest"},(0,a.kt)("strong",{parentName:"h2"},"Create a Test Manifest")),(0,a.kt)("p",null,"The Artillery tests are defined in declarative manner, as YAML files.",(0,a.kt)("br",{parentName:"p"}),"\n","The test should warm up our service a little bit first, then we can hit a little harder."),(0,a.kt)("p",null,"Let's save our test into ",(0,a.kt)("inlineCode",{parentName:"p"},"test.yaml")," file with the content below:   "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'config:\n  target: "http://testkube-api-server:8088"\n  phases:\n    - duration: 6\n      arrivalRate: 5\n      name: Warm up\n    - duration: 120\n      arrivalRate: 5\n      rampTo: 50\n      name: Ramp up load\n    - duration: 60\n      arrivalRate: 50\n      name: Sustained load\nscenarios:\n  - name: "Check health endpoint"\n    flow:\n      - get:\n          url: "/health"\n')),(0,a.kt)("p",null,"Our test is ready but how do we run it in a Kubernetes cluster? Testkube will help you with that! "),(0,a.kt)("p",null,"Let's create a new Testkube test based on the saved Artillery test definition."),(0,a.kt)("h2",{id:"create-a-new-testkube-test"},(0,a.kt)("strong",{parentName:"h2"},"Create a New Testkube Test")),(0,a.kt)("p",null,"If you want to upload a test file directly (like in this example) you can use Dashboard, or CLI - depending on your preferences."),(0,a.kt)("h3",{id:"testkube-dashboard"},"Testkube Dashboard"),(0,a.kt)("p",null,"If you prefer to use Dashboard, just go to Tests, and click ",(0,a.kt)("inlineCode",{parentName:"p"},"Add a new test")," button. Then you need to fill in the test Name, choose the test Type (",(0,a.kt)("inlineCode",{parentName:"p"},"artillery/test"),"), Test Source (",(0,a.kt)("inlineCode",{parentName:"p"},"File"),", which allow you to upload specific file), and choose the File.\n",(0,a.kt)("img",{alt:"Container executor creation dialog",src:n(18285).Z,width:"879",height:"684"})),(0,a.kt)("h3",{id:"testkube-cli"},"Testkube CLI"),(0,a.kt)("p",null,"If you prefer using the CLI instead, you can create the test with ",(0,a.kt)("inlineCode",{parentName:"p"},"testcube create test"),".\nYou need to set test:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--name")," (for example, ",(0,a.kt)("inlineCode",{parentName:"li"},"artillery-api-test"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--type")," (in this case ",(0,a.kt)("inlineCode",{parentName:"li"},"artillery/test"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--file")," which is a path to your test file (in this case ",(0,a.kt)("inlineCode",{parentName:"li"},"test.yaml"),")")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"testkube create test --name artillery-api-test --type artillery/test --file test.yaml\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Test created  \ud83e\udd47\n")),(0,a.kt)("h2",{id:"running-a-test"},(0,a.kt)("strong",{parentName:"h2"},"Running a Test")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ testkube run test artillery-api-test                                                                                                                       \nType:              artillery/test\nName:              artillery-api-test\nExecution ID:      63ee9ca6872e05f0ea790d73\nExecution name:    artillery-api-test-1\nExecution number:  1\nStatus:            running\nStart time:        2023-02-16 21:14:14.451905194 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution artillery-api-test-1\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution artillery-api-test-1\n")),(0,a.kt)("p",null,"You can also watch your test results in real-time with ",(0,a.kt)("inlineCode",{parentName:"p"},"-f"),' flag (like "follow"). '),(0,a.kt)("p",null,"Test runs can be named. If no name is passed, Testkube will autogenerate a name."),(0,a.kt)("h2",{id:"getting-test-results"},(0,a.kt)("strong",{parentName:"h2"},"Getting Test Results")),(0,a.kt)("p",null,"Let's get back our finished test results. The test report and output will be stored in Testkube storage to revisit when necessary."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"testkube get execution artillery-api-test-1                                               \nID:         63ee9cd8872e05f0ea790d76\nName:       artillery-api-test-1\nNumber:            1\nTest name:         artillery-api-test\nType:              artillery/test\nStatus:            passed\nStart time:        2023-02-16 21:15:04.979 +0000 UTC\nEnd time:          2023-02-16 21:18:19.463 +0000 UTC\nDuration:          00:03:14\n\n...\n... (long output)\n...\n\nAll VUs finished. Total time: 3 minutes, 7 seconds\n\n--------------------------------\nSummary report @ 21:18:16(+0000)\n--------------------------------\n\nhttp.codes.200: ................................................................ 6330\nhttp.request_rate: ............................................................. 33/sec\nhttp.requests: ................................................................. 6330\nhttp.response_time:\n  min: ......................................................................... 0\n  max: ......................................................................... 11\n  median: ...................................................................... 0\n  p95: ......................................................................... 1\n  p99: ......................................................................... 2\nhttp.responses: ................................................................ 6330\nvusers.completed: .............................................................. 6330\nvusers.created: ................................................................ 6330\nvusers.created_by_name.Check health endpoint: .................................. 6330\nvusers.failed: ................................................................. 0\nvusers.session_length:\n  min: ......................................................................... 0.9\n  max: ......................................................................... 25.6\n  median: ...................................................................... 1.3\n  p95: ......................................................................... 3.3\n  p99: ......................................................................... 9.5\nLog file: /tmp/test-report.json\n\n\nTest execution completed with success in 3m14.484s \ud83e\udd47\n\n")),(0,a.kt)("h2",{id:"-additional-examples"},(0,a.kt)("strong",{parentName:"h2"}," Additional examples")),(0,a.kt)("p",null,"Additional Artillery examples can be found in the Testkube repository ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/artillery/executor-smoke/"},"here"),"."))}c.isMDXComponent=!0},18285:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/dashboard-create-artillery-api-test-727a136c9175a7fb4c6efc18126652b2.png"}}]);