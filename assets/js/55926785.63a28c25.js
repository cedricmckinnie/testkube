"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[706],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=s,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),s=n(86010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>E});var a=n(87462),s=n(67294),r=n(86010),i=n(12466),o=n(76775),l=n(91980),u=n(67392),c=n(50012);function p(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}function m(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=m(e),[i,o]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[l,u]=h({queryString:n,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),f=(()=>{const e=l??p;return d({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,r]),tabValues:r}}var f=n(72389);const k="tabList__CuJ",g="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(p(t),l(a))},d=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}null==(t=n)||t.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},i,{className:(0,r.Z)("tabs__item",g,null==i?void 0:i.className,{"tabs__item--active":o===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=b(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",k)},s.createElement(v,(0,a.Z)({},e,t)),s.createElement(y,(0,a.Z)({},e,t)))}function E(e){const t=(0,f.Z)();return s.createElement(N,(0,a.Z)({key:String(t)},e))}},49964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(87462),s=(n(67294),n(3905)),r=n(74866),i=n(85162);const o={},l="Postman",u={unversionedId:"test-types/executor-postman",id:"test-types/executor-postman",title:"Postman",description:"\x3c!-- Watch this simple Testkube intro video for Postman collections with Testkube:",source:"@site/docs/test-types/executor-postman.mdx",sourceDirName:"test-types",slug:"/test-types/executor-postman",permalink:"/testkube/test-types/executor-postman",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-postman.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Playwright",permalink:"/testkube/test-types/executor-playwright"},next:{title:"SoapUI",permalink:"/testkube/test-types/executor-soapui"}},c={},p=[{value:"Prerequisite: Example Postman test",id:"prerequisite-example-postman-test",level:2},{value:"Service Under Test",id:"service-under-test",level:3},{value:"Example Postman collection",id:"example-postman-collection",level:3},{value:"Exporting Postman collection",id:"exporting-postman-collection",level:4},{value:"Creating and running Test",id:"creating-and-running-test",level:2},{value:"a) Creating a Test from File",id:"a-creating-a-test-from-file",level:3},{value:"b) Creating a Test with Git file",id:"b-creating-a-test-with-git-file",level:3},{value:"Running a Test",id:"running-a-test",level:3},{value:"a) Creating a Test from File",id:"a-creating-a-test-from-file-1",level:3},{value:"b) Creating a Test with Git file",id:"b-creating-a-test-with-git-file-1",level:3},{value:"Running a Test",id:"running-a-test-1",level:3},{value:"Creating a Test with Git file",id:"creating-a-test-with-git-file",level:3}],m={toc:p};function d(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"postman"},"Postman"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Check out our ",(0,s.kt)("a",{parentName:"strong",href:"https://testkube.io/blog/api-testing-in-kubernetes-with-postman"},"blog post")," to follow tutorial steps for end-to-end testing of your Kubernetes applications with Postman.")),(0,s.kt)("p",null,"Testkube is able to run Postman collections inside your Kubernetes cluster so it can be used to test internal or external services."),(0,s.kt)("h2",{id:"prerequisite-example-postman-test"},"Prerequisite: Example Postman test"),(0,s.kt)("h3",{id:"service-under-test"},"Service Under Test"),(0,s.kt)("p",null,"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has\nClusterIP ",(0,s.kt)("inlineCode",{parentName:"p"},"Service")," created and is exposed on port ",(0,s.kt)("inlineCode",{parentName:"p"},"8088"),". The service name is ",(0,s.kt)("inlineCode",{parentName:"p"},"testkube-api-server"),"\nand is exposing the ",(0,s.kt)("inlineCode",{parentName:"p"},"/health")," endpoint that we want to test."),(0,s.kt)("p",null,"To call the SUT inside a cluster:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://testkube-api-server:8088/health\n")),(0,s.kt)("p",null,"Output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"200 OK\n")),(0,s.kt)("h3",{id:"example-postman-collection"},"Example Postman collection"),(0,s.kt)("p",null,"In the following examples, we will use a simple Postman test that makes a GET request to ",(0,s.kt)("inlineCode",{parentName:"p"},"http://testkube-api-server:8088/health"),", and validates if response code equals 200."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"postman create collection",src:n(89399).Z,width:"1028",height:"409"})),(0,s.kt)("p",null,"You can find it in the Testkube repository: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/postman/testkube-api-server-health.postman_collection.json"},"https://github.com/kubeshop/testkube/blob/main/test/postman/testkube-api-server-health.postman_collection.json")),(0,s.kt)("h4",{id:"exporting-postman-collection"},"Exporting Postman collection"),(0,s.kt)("p",null,"If you'd like to use another collection you can just create it in Postman, and then export it to ",(0,s.kt)("inlineCode",{parentName:"p"},".postman_collection.json")," file by right clicking it, and selecting Export."),(0,s.kt)("h2",{id:"creating-and-running-test"},"Creating and running Test"),(0,s.kt)("p",null,"Postman collection consist of the single file, so the following test sources can be used to create a test:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"File"),(0,s.kt)("li",{parentName:"ul"},"Git file"),(0,s.kt)("li",{parentName:"ul"},"String")),(0,s.kt)(r.Z,{groupId:"dashboard-cli",mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"dash",label:"Dashboard",mdxType:"TabItem"},(0,s.kt)("p",null,"If you prefer to use Dashboard, just go to Tests, and click ",(0,s.kt)("inlineCode",{parentName:"p"},"Add a new test")," button. Then you need to fill in the test Name, choose the test Type (",(0,s.kt)("inlineCode",{parentName:"p"},"postman/collection"),"), and choose Test Source of your choice."),(0,s.kt)("h3",{id:"a-creating-a-test-from-file"},"a) Creating a Test from File"),(0,s.kt)("p",null,"If you have the collection you want to run saved locally, you can use ",(0,s.kt)("inlineCode",{parentName:"p"},"File")," as the test source. You can then select, and upload it directly."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"dashboard create postman test from file",src:n(43273).Z,width:"875",height:"686"})),(0,s.kt)("h3",{id:"b-creating-a-test-with-git-file"},"b) Creating a Test with Git file"),(0,s.kt)("p",null,"If you have a collection in the Git repository, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Git file")," source. Then, you need to fill in repository details:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"git repository URI (in this case ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com/kubeshop/testkube.git"),")")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"branch (",(0,s.kt)("inlineCode",{parentName:"p"},"main"),")")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"path to Postman collection in your repository (in this case ",(0,s.kt)("inlineCode",{parentName:"p"},"test/postman/testkube-api-server-health.postman_collection.json"),"). "),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{alt:"dashboard create postman test from git-file",src:n(95056).Z,width:"874",height:"1078"})),(0,s.kt)("p",{parentName:"li"},"In this example, the repository is public, but in case of private ones you mwould need to additionally fill in Git credentials."))),(0,s.kt)("h3",{id:"running-a-test"},"Running a Test"),(0,s.kt)("p",null,"If you created a Test using any of the previous methods, you will be redirected to Test details. In order to run it all you need to do is to click the Run button.")),(0,s.kt)(i.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,s.kt)("p",null,"If you prefer using the CLI instead, you can create the test with ",(0,s.kt)("inlineCode",{parentName:"p"},"testkube create test"),"."),(0,s.kt)("h3",{id:"a-creating-a-test-from-file-1"},"a) Creating a Test from File"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name postman-test --type postman/collection --file test/postman/testkube-api-server-health.postman_collection.json\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"Test created testkube / postman-test \ud83e\udd47\n")),(0,s.kt)("h3",{id:"b-creating-a-test-with-git-file-1"},"b) Creating a Test with Git file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name postman-test --type postman/collection --test-content-type git-file --git-uri https://github.com/kubeshop/testkube.git --git-branch main --git-path test/postman/testkube-api-server-health.postman_collection.json```\n\n```sh\nTest created testkube / postman-test \ud83e\udd47\n")),(0,s.kt)("h3",{id:"running-a-test-1"},"Running a Test"),(0,s.kt)("p",null,"The test can be run using ",(0,s.kt)("inlineCode",{parentName:"p"},"testkube run test")," command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"$ testkube run test postman-test                                                                                                                 \nType:              postman/collection\nName:              postman-test\nExecution ID:      63fde0b3a862384f8f959239\nExecution name:    postman-test-6\nExecution number:  6\nStatus:            running\nStart time:        2023-02-28 11:08:35.081273721 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution postman-test-6\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution postman-test-6\n")),(0,s.kt)("p",null,"You can then check the execution results:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'\nID:         63fde715a862384f8f95923d\nName:       postman-test-8\nNumber:            8\nTest name:         postman-test\nType:              postman/collection\nStatus:            passed\nStart time:        2023-02-28 11:35:49.177 +0000 UTC\nEnd time:          2023-02-28 11:35:57.203 +0000 UTC\nDuration:          00:00:08\nRepository parameters:\n  Branch:          docs-postman\n  Commit:          \n  Path:            test/postman/testkube-api-server-health.postman_collection.json\n  Working dir:     \n  Certificate:     \n\nrunning test [63fde715a862384f8f95923d]\n\ud83d\ude9a Initializing...\n\ud83c\udf0d Reading environment variables...\n\u2705 Environment variables read successfully\nRUNNER_ENDPOINT="testkube-minio-service-testkube:9000"\nRUNNER_ACCESSKEYID="********"\nRUNNER_SECRETACCESSKEY="********"\nRUNNER_LOCATION=""\nRUNNER_TOKEN=""\nRUNNER_BUCKET="testkube-artifacts"\nRUNNER_SSL=false\nRUNNER_SCRAPPERENABLED="true"\nRUNNER_GITUSERNAME=""\nRUNNER_GITTOKEN=""\nRUNNER_DATADIR="/data"\n\ud83d\udce6 Fetching test content from git-file...\n\u2705 Test content fetched to path /data/repo/test/postman/testkube-api-server-health.postman_collection.json\n\ud83d\udcc2 Fetching uploads from object store testkube-minio-service-testkube:9000...\n\ud83d\udcc2 Placing files from buckets into /data/uploads/ []\n\ud83d\udcc2 Getting the contents of bucket folders [test-postman-test]\n\n\ud83d\udcc2 Setting up access to files in /data\n\ud83d\udd2c Executing in directory /data: \n $ chmod \n\u2705 Execution succeeded\n\u2705 Access to files enabled\n\u2705 Initialization successful\n0xc0058e69c0\n\ud83d\ude9a Preparing test runner\n\ud83c\udf0d Reading environment variables...\n\u2705 Environment variables read successfully\nRUNNER_ENDPOINT="testkube-minio-service-testkube:9000"\nRUNNER_ACCESSKEYID="********"\nRUNNER_SECRETACCESSKEY="********"\nRUNNER_LOCATION=""\nRUNNER_TOKEN=""\nRUNNER_BUCKET="testkube-artifacts"\nRUNNER_SSL=false\nRUNNER_SCRAPPERENABLED="true"\nRUNNER_GITUSERNAME=""\nRUNNER_GITTOKEN=""\nRUNNER_DATADIR="/data"\nrunning test [63fde715a862384f8f95923d]\n\ud83d\ude9a Preparing for test run\n\ud83d\udce6 Fetching test content from git-file...\n\u2705 Test content fetched to path /tmp/git-checkout4073207673/repo/test/postman/testkube-api-server-health.postman_collection.json\n\ud83d\udd2c Executing in directory : \n $ newman run /tmp/git-checkout4073207673/repo/test/postman/testkube-api-server-health.postman_collection.json -e /tmp/testkube-tmp3625780620 --reporters cli,json --reporter-json-export /tmp/testkube-tmp1329378482.json\nnewman\n\n\ntestkube-api-server\n\n\n\u2192 testkube-api-server\n\n  GET http://testkube-api-server:8088/health \n[200 OK, 124B, 50ms]\n\n  \u2713  Status code is 200\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         \u2502         executed \u2502           failed \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              iterations \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                requests \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502            test-scripts \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      prerequest-scripts \u2502                0 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              assertions \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total run duration: 85ms                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total data received: 8B (approx)                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 average response time: 50ms [min: 50ms, max: 50ms, s.d.: 0\xb5s] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2705 Execution succeeded\n\u2705 Got Newman result successfully\n\u2705 Mapped Newman result successfully\nnewman\n\ntestkube-api-server\n\n\u2192 testkube-api-server\n  GET http://testkube-api-server:8088/health [200 OK, 124B, 50ms]\n  \u2713  Status code is 200\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         \u2502         executed \u2502           failed \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              iterations \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                requests \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502            test-scripts \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      prerequest-scripts \u2502                0 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              assertions \u2502                1 \u2502                0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total run duration: 85ms                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total data received: 8B (approx)                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 average response time: 50ms [min: 50ms, max: 50ms, s.d.: 0\xb5s] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\nTest execution completed with success in 8.026s \ud83e\udd47\n'))),(0,s.kt)(i.Z,{value:"crd",label:"Custom Resource",mdxType:"TabItem"},(0,s.kt)("p",null,"Third option to create the Test is to use a Test CRD. If you already have the test created you can check definition in Dashboard (",(0,s.kt)("inlineCode",{parentName:"p"},"Definition")," tab in Test Settings). "),(0,s.kt)("p",null,"You can also get a definition while using ",(0,s.kt)("inlineCode",{parentName:"p"},"testkube create test")," command by adding ",(0,s.kt)("inlineCode",{parentName:"p"},"--crd-only"),".\nIn that case, the test won't be created, but the definition will be displayed."),(0,s.kt)("h3",{id:"creating-a-test-with-git-file"},"Creating a Test with Git file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: tests.testkube.io/v3\nkind: Test\nmetadata:\n  name: postman-test\n  namespace: testkube\nspec:\n  type: postman/collection\n  content:\n    type: git-file\n    repository:\n      type: git\n      uri: https://github.com/kubeshop/testkube.git\n      branch: main\n      path: test/postman/testkube-api-server-health.postman_collection.json\n")),(0,s.kt)("p",null,"When the Test CRD is saved to the yaml file it can then be applied directly with ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl apply -f SOME_FILE_NAME.yaml"),"."))))}d.isMDXComponent=!0},43273:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-postman-create-test-file-d304d609264026ef677ac384f78f3e20.png"},95056:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-postman-create-test-git-file-9bc3e540f5f576ed3576dce4c409e4c8.png"},89399:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman_create_collection-f3bcbb247f4bb6a41b5d9438e3e3beef.png"}}]);