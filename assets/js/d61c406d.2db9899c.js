"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[1987],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),k=r,m=d["".concat(o,".").concat(k)]||d[k]||p[k]||s;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),s=n(86010),i=n(12466),l=n(76775),o=n(91980),u=n(67392),c=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function k(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!k({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[o,u]=m({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),g=(()=>{const e=o??p;return k({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!k({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,s]),tabValues:s}}var g=n(72389);const b="tabList__CuJ",f="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),o(a))},k=e=>{var t;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:k,onClick:d},i,{className:(0,s.Z)("tabs__item",f,null==i?void 0:i.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=h(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",b)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},23264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),s=n(74866),i=n(85162);const l={},o="K6",u={unversionedId:"test-types/executor-k6",id:"test-types/executor-k6",title:"K6",description:"Check out our blog post to follow tutorial steps to harness the power of k6 load testing in Kubernetes with Testkube's CLI and API.",source:"@site/docs/test-types/executor-k6.mdx",sourceDirName:"test-types",slug:"/test-types/executor-k6",permalink:"/testkube/test-types/executor-k6",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-k6.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JMeter",permalink:"/testkube/test-types/executor-jmeter"},next:{title:"KubePug",permalink:"/testkube/test-types/executor-kubepug"}},c={},p=[{value:"Example k6 test",id:"example-k6-test",level:2},{value:"Test Source",id:"test-source",level:3},{value:"Creating and running Test",id:"creating-and-running-test",level:2},{value:"File",id:"file",level:4},{value:"Git file",id:"git-file",level:4},{value:"String",id:"string",level:4},{value:"File",id:"file-1",level:4},{value:"Git file",id:"git-file-1",level:4},{value:"Git directory",id:"git-directory",level:4},{value:"Using Additional K6 Arguments in Your Tests",id:"using-additional-k6-arguments-in-your-tests",level:2},{value:"Git file",id:"git-file-2",level:4},{value:"Git directory",id:"git-directory-1",level:4},{value:"String",id:"string-1",level:5},{value:"K6 Test Results",id:"k6-test-results",level:2}],d={toc:p};function k(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"k6"},"K6"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Check out our ",(0,r.kt)("a",{parentName:"strong",href:"https://kubeshop.io/blog/load-testing-in-kubernetes-with-k6-and-testkube"},"blog post")," to follow tutorial steps to harness the power of k6 load testing in Kubernetes with Testkube's CLI and API.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://k6.io/docs/"},"K6")," is an open-source load testing tool that makes performance testing easy and productive for engineering teams. K6 is free, developer-centric and extensible."),(0,r.kt)("p",null,"Using k6, you can test the reliability and performance of your systems and catch performance regressions and problems earlier. K6 will help you to build resilient and performant applications that scale."),(0,r.kt)("p",null,"K6 is developed by Grafana Labs and the community."),(0,r.kt)("p",null,"Testkube's k6 executor provides a convenient way of running k6 tests."),(0,r.kt)("h2",{id:"example-k6-test"},"Example k6 test"),(0,r.kt)("p",null,"In this example we will use the following k6 test:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/k6/executor-tests/k6-smoke-test-without-envs.js"},"https://github.com/kubeshop/testkube/blob/main/test/k6/executor-tests/k6-smoke-test-without-envs.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import http from "k6/http";\n\nexport default function () {\n  http.get("https://testkube.kubeshop.io/");\n}\n')),(0,r.kt)("h3",{id:"test-source"},"Test Source"),(0,r.kt)("p",null,"K6 tests may vary significantly. The test may be just a single file, but may also consist of multiple files (modules, dependencies, or test data files). That's why all of the available Test Sources may be used with K6:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Git file"),(0,r.kt)("li",{parentName:"ul"},"Git directory"),(0,r.kt)("li",{parentName:"ul"},"File"),(0,r.kt)("li",{parentName:"ul"},"String")),(0,r.kt)("h2",{id:"creating-and-running-test"},"Creating and running Test"),(0,r.kt)(s.Z,{groupId:"dashboard-cli",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"dash",label:"Dashboard",mdxType:"TabItem"},(0,r.kt)("p",null,"If you prefer to use Dashboard, just go to Tests, and click ",(0,r.kt)("inlineCode",{parentName:"p"},"Add a new test")," button. Then you need to fill in the test Name, choose the test Type (",(0,r.kt)("inlineCode",{parentName:"p"},"k6 script"),"), and then choose Test Source."),(0,r.kt)("h4",{id:"file"},"File"),(0,r.kt)("p",null,"In case of File source the test file is uploaded directly."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"K6 test - creation dialog - file",src:n(65785).Z,width:"878",height:"680"})),(0,r.kt)("h4",{id:"git-file"},"Git file"),(0,r.kt)("p",null,"In case of Git file you need to fill in repository details - Git repository URI (in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/kubeshop/testkube.git"),"), branch (",(0,r.kt)("inlineCode",{parentName:"p"},"main"),"), and path to k6 script in your repository (",(0,r.kt)("inlineCode",{parentName:"p"},"est/k6/executor-tests/k6-smoke-test-without-envs.js"),"). In this example, the repository is public, but in case of private ones you mwould need to additionally fill in Git credentials."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"K6 test - creation dialog - git file",src:n(83581).Z,width:"876",height:"1072"})),(0,r.kt)("h4",{id:"string"},"String"),(0,r.kt)("p",null,"For String source the test script is added directly."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"K6 test - creation dialog - string",src:n(84532).Z,width:"876",height:"882"}))),(0,r.kt)(i.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},"If you prefer using the CLI, you can create the test with `testkube create test`.",(0,r.kt)("p",null,"You need to set:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--name")," (for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"k6-test"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--type")," (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"k6/script"),")")),(0,r.kt)("p",null,"And, then choose Test Content type based on Test Source you want to use:"),(0,r.kt)("h4",{id:"file-1"},"File"),(0,r.kt)("p",null,"In case of File test source:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--test-content-type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"file-uri"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--file")," (path to your k6 script - in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"test/k6/executor-tests/k6-smoke-test-without-envs.js"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name k6-test --type k6/script --test-content-type file-uri --file test/k6/executor-tests/k6-smoke-test-without-envs.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Test created testkube / k6-test \ud83e\udd47\n")),(0,r.kt)("h4",{id:"git-file-1"},"Git file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--test-content-type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"git-file"),", so specific file will be checked out from the Git repository)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-uri")," - repository URI (in case of this example, ",(0,r.kt)("inlineCode",{parentName:"li"},"https://github.com/kubeshop/testkube.git"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-branch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-path")," - path to the k6 script in the repository (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"test/k6/executor-tests/k6-smoke-test-without-envs.js"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name k6-test --type k6/script --test-content-type git-file --git-uri https://github.com/kubeshop/testkube.git --git-branch main --git-path test/k6/executor-tests/k6-smoke-test-without-envs.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Test created testkube / k6-test \ud83e\udd47\n")),(0,r.kt)("h4",{id:"git-directory"},"Git directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--test-content-type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"git-directory"),", so the whole directory will be checked out from the Git repository)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-uri")," - repository URI (in case of this example, ",(0,r.kt)("inlineCode",{parentName:"li"},"https://github.com/kubeshop/testkube.git"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-branch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-path")," (path to the directory that should be checked out)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--executor-args")," (whole directory will be checked out - specific test file must be set as k6 argument - in this example ",(0,r.kt)("inlineCode",{parentName:"li"},"test/k6/executor-tests/k6-smoke-test-without-envs.js"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name k6-test --type k6/script --test-content-type git-dir --git-uri https://github.com/kubeshop/testkube.git --git-branch main --git-path test/k6/executor-tests --executor-args test/k6/executor-tests/k6-smoke-test-without-envs.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Test created testkube / k6-test \ud83e\udd47\n")),(0,r.kt)("h2",{id:"using-additional-k6-arguments-in-your-tests"},"Using Additional K6 Arguments in Your Tests"),(0,r.kt)("p",null,"Additional agruments can be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"k6")," binary both on test creation (",(0,r.kt)("inlineCode",{parentName:"p"},"--executor-args"),"), and during test execution (",(0,r.kt)("inlineCode",{parentName:"p"},"--args"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube run test -k6-test --args '--vus 100 --no-connection-reuse'\n"))),(0,r.kt)(i.Z,{value:"crd",label:"Custom Resource",mdxType:"TabItem"},(0,r.kt)("h4",{id:"git-file-2"},"Git file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: tests.testkube.io/v3\nkind: Test\nmetadata:\n  name: k6-test\n  namespace: testkube\nspec:\n  type: k6/script\n  content:\n    type: git-file\n    repository:\n      type: git\n      uri: https://github.com/kubeshop/testkube.git\n      branch: main\n      path: test/k6/executor-tests/k6-smoke-test-without-envs.js\n")),(0,r.kt)("h4",{id:"git-directory-1"},"Git directory"),(0,r.kt)("p",null,"Checking out whole git directory (in the following example ",(0,r.kt)("inlineCode",{parentName:"p"},"test/k6/executor-tests"),"), and running specific test file (",(0,r.kt)("inlineCode",{parentName:"p"},"test/k6/executor-tests/k6-smoke-test-without-envs.js"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: tests.testkube.io/v3\nkind: Test\nmetadata:\n  name: k6-test\n  namespace: testkube\nspec:\n  type: k6/script\n  content:\n    type: git-dir\n    repository:\n      type: git\n      uri: https://github.com/kubeshop/testkube.git\n      branch: main\n      path: test/k6/executor-tests\n  executionRequest:\n    args:\n      - test/k6/executor-tests/k6-smoke-test-without-envs.js\n")),(0,r.kt)("h5",{id:"string-1"},"String"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: tests.testkube.io/v3\nkind: Test\nmetadata:\n  name: k6-test\n  namespace: testkube\nspec:\n  type: k6/script\n  content:\n    type: string\n    data: \"import http from 'k6/http';\\n\\nexport default function () {\\n  http.get('https://testkube.kubeshop.io/');\\n}\"\n")))),(0,r.kt)("h2",{id:"k6-test-results"},"K6 Test Results"),(0,r.kt)("p",null,"A k6 test will be successful in Testkube when all checks and thresholds are successful. In the case of an error, the test will have ",(0,r.kt)("inlineCode",{parentName:"p"},"failed")," status, even if there is no failure in the summary report in the test logs. For details check ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/k6/issues/1680"},"this k6 issue"),"."))}k.isMDXComponent=!0},65785:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-k6-create-test-file-82965b1d544c08a51c7f1994e5bfec27.png"},83581:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-k6-create-test-git-file-cfbe7ee143c89452f12c077cd8f111f4.png"},84532:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-k6-create-test-string-fccdf7090c09b924c5a738a53251cc0a.png"}}]);